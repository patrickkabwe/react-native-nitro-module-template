///
/// HybridSumSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridSumSpec.hpp"

// Forward declaration of `HybridSumSpec_cxx` to properly resolve imports.
namespace Sum { class HybridSumSpec_cxx; }





#include "Sum-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::sum {

  /**
   * The C++ part of HybridSumSpec_cxx.swift.
   *
   * HybridSumSpecSwift (C++) accesses HybridSumSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridSumSpec_cxx can directly inherit from the C++ class HybridSumSpec
   * to simplify the whole structure and memory management.
   */
  class HybridSumSpecSwift: public virtual HybridSumSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridSumSpecSwift(const Sum::HybridSumSpec_cxx& swiftPart):
      HybridObject(HybridSumSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline Sum::HybridSumSpec_cxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline double add(double num1, double num2) override {
      auto __result = _swiftPart.add(std::forward<decltype(num1)>(num1), std::forward<decltype(num2)>(num2));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    Sum::HybridSumSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::sum
